<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->
<xwikidoc version="1.1">
  <web>Release</web>
  <name>ReleasePlanHelp</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1399872238000</creationDate>
  <parent>Release.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1414607359000</date>
  <contentUpdateDate>1414607359000</contentUpdateDate>
  <version>1.1</version>
  <title>Release Plan Documentation</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{box cssClass="floatinginfobox" title="**Contents**"}}
{{toc/}}
{{/box}}

Contains instructions to perform various release steps in the [[Release Plans&gt;&gt;Release.WebHome]].

= Set up your identity =

* Make sure your git configuration has a proper username and email address: {{code language=sh}}git config --global user.name; git config --global user.email{{/code}}
* If git fails to find your secret key for signing the tag during the release process you can use ##git config user.signingkey xxx## to specify the secret key to be used
* [[Create a GPG key&gt;&gt;http://fedoraproject.org/wiki/Creating_GPG_Keys]] if you don't already have one: {{code language="sh"}}gpg --gen-key{{/code}}
* Make sure gpg-agent is running, or you'll have to manually enter your GPG key passphrase literally 100 of times during the push to Nexus phase below
** If releasing from a remote machine over SSH, run ##export GPG_TTY=`tty`## to make GPG use the right pin entry application, since by default it uses a GUI that won't work over SSH
* Make sure you have an account on [[Nexus&gt;&gt;http://nexus.cs.toronto.edu]]; ask Sergiu for one if you don't
* Make sure you have an account on [[phenotips.org&gt;&gt;Main.WebHome]]; make sure your account is in the "advanced" mode
* Make sure you have your Nexus account configured in ##~~/.m2/settings.xml## (put your own username and password in the file):

{{code language="xml"}}
&lt;settings&gt;
  &lt;servers&gt;
    &lt;server&gt;
      &lt;id&gt;nexus.cs.toronto.edu&lt;/id&gt;
      &lt;username&gt;user&lt;/username&gt;
      &lt;password&gt;pass&lt;/password&gt;
    &lt;/server&gt;
    &lt;server&gt;
      &lt;id&gt;nexus.phenotips.org&lt;/id&gt;
      &lt;username&gt;user&lt;/username&gt;
      &lt;password&gt;pass&lt;/password&gt;
    &lt;/server&gt;
  &lt;/servers&gt;
&lt;/settings&gt;
{{/code}}

= Build the release =

(The build process creates an .rpm distribution among other things, so make sure the build machine has an `rpmbuild` utility installed)

{{code language="sh"}}
# Define a variable for the release version
$ export VERSION=1.0-milestone-1
# Make sure you are up to date
$ git checkout master
$ git pull
$ git status
# There shouldn't be any commits ahead of origin/master
# Clean any uncommitted files
# WARNING: this will remove all untracked files! Make sure there isn't any important code left uncommitted!
# If you have such files and would like to keep it, create a new git clone instead
$ git clean -dxf
# Go to a release branch
$ git checkout -b release-${VERSION}
# Prepare the release:
$ mvn release:prepare -DreleaseVersion=${VERSION} -DdevelopmentVersion=1.0-SNAPSHOT -Dtag=phenotips-${VERSION} -Pfunctional-tests
# --------------------------
# Now would be a good time to smoke-test the built zip file
# --------------------------
# Sign the tag
$ git checkout phenotips-${VERSION}
$ git tag -d phenotips-${VERSION}
$ git tag -s -m "Tagging phenotips-${VERSION}" phenotips-${VERSION}
# Verify the signature used
git cat-file -p phenotips-${VERSION}
# Push the tag
$ git push origin phenotips-${VERSION}
# Push the release artifacts to Nexus
$ mvn release:perform -Pfunctional-tests
# Cleanup
$ git checkout master
$ git branch -D release-${VERSION}
{{/code}}

= Restarting release build in case of a failure =

In case ##mvn release:prepare ...## fails it is best to execute ##mvn release:clean## and ##git reset ~--hard origin/master## after fixing the problem and before another build attempt.

Also if a failure occurs after the release has been tagged in git locally, make sure to remove the tag before building again: ##git tag -d phenotips-${VERSION}##</content>
</xwikidoc>
